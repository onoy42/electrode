[{"title":"Community","type":0,"sectionRef":"#","url":"docs/community","content":""},{"title":"Connecting with Electrode","type":1,"pageTitle":"Community","url":"docs/community#connecting-with-electrode","content":"We encourage the open source community to engage with us to help further develop Electrode. Please use the following forums to report any questions, feature requests, or issues about Electrode. Github IssuesGitter You can also follow us on Twitter for news and updates about the Electrode project. "},{"title":"Getting started","type":0,"sectionRef":"#","url":"docs/getting-started","content":""},{"title":"Building large scale universal React Web Applications","type":1,"pageTitle":"Getting started","url":"docs/getting-started#building-large-scale-universal-react-web-applications","content":"Electrode was developed as the engine that has been powering the http://www.walmart.com eCommerce website since 2016. Electrode Web is a rapid application development framework; a full stack, end-to-end platform for developing, deploying, and maintaining JavaScript applications at Walmart. importantDo you have 5 minutes? That is how long it takes to scaffold your first app.Try it now! "},{"title":"License","type":1,"pageTitle":"Getting started","url":"docs/getting-started#license","content":"Copyright (c) 2016-present, Walmart Licensed under the Apache License, Version 2.0 "},{"title":"Quick start","type":1,"pageTitle":"Getting started","url":"docs/getting-started#quick-start","content":"Development on your local machine# To generate and deploy your Electrode app and Electrode components, install the following (if you have not already): Install the node.js version 10.x.x or laterWe recommend a tool such as nvm for managing node.js installations.If you are on Windows, then universal nvm is recommended.To build an app scaffold, run the following command in your console/terminal: npx @xarc/create-app my-appCopy Wait for this to complete. The console will display the following with some instructions: Created react/node webapp in directory 'my-app'Copy Follow the instructions outlined in the console.When complete, open your browser to localhost:3000To stop the DEV server, press Q Your new electrode app will appear as shown below.  Important: Existing electrode usersIf you are an existing electrode user, please take note of the following sections "},{"title":"@xarc npm Scope","type":1,"pageTitle":"Getting started","url":"docs/getting-started#xarc-npm-scope","content":"New Electrode X packages are published under the npm scope @xarc, where arc is inspired by <www.twi-global.com/technical-knowledge/faqs/what-is-arc-welding> "},{"title":"Essentials","type":1,"pageTitle":"Getting started","url":"docs/getting-started#essentials","content":" Package Description Corresponding old package @xarc/app JS server runtime support for electrode X electrode-archetype-react-app @xarc/app-dev dev support for electrode X electrode-archetype-react-app-dev @xarc/webpack default webpack configs N/A  Optionals#  Package @xarc/config-jest @xarc/config-karma @xarc/config-mocha @xarc/ui-config @xarc/ui-logger @xarc/dll @xarc/dll-dev @xarc/config-eslint @xarc/create-app  "},{"title":"Glossary","type":0,"sectionRef":"#","url":"docs/glossary","content":"Archetypes are encapsulated boilerplates for centralizing your project configurations, workflows, and dependencies. An archetype is an npm module template, which is a “superclass” of a module, think inheritance for npm modules but not one that is used to generate code files and then discarded.Caching is a process of storing data locally in order to speed up subsequent retrievals.Child component is any component that is contained in a parent component.Container based technology is an approach to virtualization in which the virtualization layer runs as an application within the operating system (OS). In this approach, the operating system's kernel runs on the hardware node with several isolated guest virtual machines (VMs) installed on top of it. The isolated guests are called containers.Cross Site Request Forgery (CSRF) is an attack that forces an end user to execute unwanted actions on a web application in which they're currently authenticated. CSRF attacks specifically target state-changing requests, not theft of data, since the attacker has no way to see the response to the forged request.Hashing is the transformation of a string of characters into a usually shorter fixed-length value or key that represents the original string.Linting is the process of running a program that will analyze code for potential errors.Local scope is a CSS Modules feature that keeps classes local to the specified file, and does not pollute the global namespace.Markup a notation used to annotate a document's content to give information regarding the structure of the text or instructions for how it is to be displayed.Metadata extractor is a type of tooling that retrieves meta data information from various packages.Module tree is a directory tree like structure of all the package dependencies of a particular npm/node module.Multi instance is a type of architecture where multiple customers run their own separate instance of an application and operating system running on a separate virtual machine, all on a common hardware platform.Platform agnostic is software was runs on any combination of operating system and underlying processor architecture.Predictable state container is an object that stores the state of the entire app where the only way to change the state tree is to emit an action. Also known as Redux.Profiling is a form of dynamic program analysis that measures, for example, the space (memory) or time complexity of a program, the usage of particular instructions, or the frequency and duration of function calls.Promise is an object used for asynchronous computations. It represents a value that may be available now, in the future, or never.React Data Id is a custom attribute used so that React can uniquely identify its components within the Document Object Model (DOM).Rendering Engine is a program that renders marked up content.Route Handler is a method or function that is executed when a certain route was requested. It usually handles the request and returns the necessary HTML to the client.Routing is the process of selecting the best paths in a network.Scaffolding tool is a tool used to generate a set of files, folders and configurations that follow the most common best practices to start a new project or component.Server Side Rendering a process where the initial request loads the page, layout, CSS, JavaScript and content. For subsequent updates to the page, the client-side rendering approach repeats the steps it used to get the initial content.Stub is a piece of code used to stand in for some other programming functionality.Transform to change in composition or structure.Transpile is a type of compilation process that takes the source code of a program written in one programming language as its input and produces the equivalent source code in another programming language."},{"title":"Welcome to Electrode","type":0,"sectionRef":"#","url":"docs/welcome-to-electrode","content":""},{"title":"Subapps","type":1,"pageTitle":"Welcome to Electrode","url":"docs/welcome-to-electrode#subapps","content":"Introducing Sub-apps, a powerful way to express small pieces of code as independent applications in the context of an uber main application. Sub-apps are just components, and if React is used, a React component. The goal is to not limit subapps to a framework, but at the moment React is the primary focus. Sub-apps help developers breakdown complex web applications into small units for them to be independently maintained and easily managed in large engineering organizations. "},{"title":"electrode frontend components","type":1,"pageTitle":"Welcome to Electrode","url":"docs/welcome-to-electrode#electrode-frontend-components","content":" electrode is based on these technologies and understanding them is essential for working with electrode.  Technology Description Node JS server runtime Hapi Node.js Web framework React UI library Redux UI state management Babel Javascript transpiler Webpack Asset bundler PostCSS CSS with Javascript ESLint Javascript linter Karma Test Runner Mocha Test framework  importantNew users, proceed to Getting started "},{"title":"Electrode Core","type":1,"pageTitle":"Welcome to Electrode","url":"docs/welcome-to-electrode#electrode-core","content":"When building your React application with the Electrode Platform, you get an out-of-the-box app with defaults that make sense for the most typical use case, but if you need it, you have all of the following features ready to use with available options. Everything you need to build a Universal React application with ES6 and JSX.Prime support for building and sharing reusable React components.Styling with CSS Module using [PostCSS].Writing and running Unit Test with [Mocha], Karma, and [PhantomJS] or [Chrome Headless]Highly optimized Server-Side Rendering for your React AppBuild a Progressive Web App out of box "},{"title":"Subapp features","type":1,"pageTitle":"Welcome to Electrode","url":"docs/welcome-to-electrode#subapp-features","content":" Feature Description Code splitting Automatically detect subapps and configure webpack to split your JS by subapps Composability Create routes/pages that are composed of multiple subapps Concurrency Multiple subapps will be rendered concurrently on the server to compose your page Lazy loading Dynamically lazy load and create multiple instances of subapps on a page Initial Props Automatically retrieve initial props before rendering subapps Async data fetch Use React suspense to enable single pass async data fetch within components Server Side Render Independently enable server side render for each subapp Redux Automatically facilitate, initialize, and hydrate SSR data using Redux React Router Automatically setup component routing using react-router Hot module Reload Automatically support Hot Module Reload during development  "}]