[{"title":"Getting Started","type":0,"sectionRef":"#","url":"docs/getting-started","content":""},{"title":"Web Applications with node.js and React","type":1,"pageTitle":"Getting Started","url":"docs/getting-started#web-applications-with-nodejs-and-react","content":"Welcome! This is the documentation for building web application using Electrode X for node.js and React. In this quick start guide, we will show you how to create and run your first app. "},{"title":"License","type":1,"pageTitle":"Getting Started","url":"docs/getting-started#license","content":"Copyright (c) 2016-present, Walmart Licensed under the Apache License, Version 2.0 "},{"title":"Requirements","type":1,"pageTitle":"Getting Started","url":"docs/getting-started#requirements","content":"Install node.js version 12.x.x or laterFor Unix or Windows, we recommend a universal node version manager tool for managing node.js installations.If you are using Unix only, then the Unix only nvm tool is a good option. "},{"title":"Creating Your First App","type":1,"pageTitle":"Getting Started","url":"docs/getting-started#creating-your-first-app","content":"Note: our packages are published under the npm scope @xarc To create your first Electrode X app: npx @xarc/create-app my-appCopy Wait for this to complete. The console will display the following with some instructions: Created react/node webapp in directory 'my-app'. To start development, please run:Copy Follow the instructions outlined in the console.When complete, open your browser to http://localhost:3000To stop the DEV server, press Q Your new electrode app will appear as shown below.  "},{"title":"The Application","type":0,"sectionRef":"#","url":"docs/quick-start/the-application","content":""},{"title":"The Files and Directories","type":1,"pageTitle":"The Application","url":"docs/quick-start/the-application#the-files-and-directories","content":"Your app consists of these essential top level directories and files:  Files and Dirs Description package.json node.js/npm package.json xrun-tasks.ts The file that loads Electrode X's development tasks for xrun task runner tsconfig.json Typescript config babel.config.js Babel config .browserslitsrc configuration for browserslist static static web assets src Directory for your app's source code  "},{"title":"The src Directory","type":1,"pageTitle":"The Application","url":"docs/quick-start/the-application#the-src-directory","content":"The src directory is where your app's code is. The sample app we created for you contains these files: src├── app.tsx├── demo1│ └── index.tsx├── demo2│ ├── index.tsx│ └── reducers.ts├── demo3│ ├── index.tsx│ └── react-query-fetch.ts├── home│ ├── index.tsx│ ├── message.ts│ └── static-props.tsx├── import-assets.d.ts├── info.ts├── server│ ├── config.ts│ ├── index.ts│ └── routes.ts└── styles ├── demo1.mod.css └── demo1.mod.stylCopy Everything under src/server are source for your app's node.js server.There are four SubApps defined in the sample app:  SubApp name Location Demo1 src/demo1 Demo2 src/demo2 Demo3 src/demo3 home src/home  "},{"title":"Creating a SubApp","type":1,"pageTitle":"The Application","url":"docs/quick-start/the-application#creating-a-subapp","content":"A SubApp is just a React Component that can incorporate extra features Electrode X offer, and will be dynamically imported. You can render a page with multiple SubApps on it, each with its own independent behaviors, such as enabling SSR, or using different data models. To create a SubApp: First create your .tsx file, say \"hello.tsx\", and export a subapp that's a ReactSubApp type: import { React, ReactSubApp } from \"@xarc/react\"; const Hello = () => <div>Hello, World</div>; export const subapp: ReactSubApp = { Component: Hello};Copy Next declare your SubApp in another file, say \"app.tsx\", and use the declareSubApp API and dynamic import your subapp. import { declareSubApp } from \"@xarc/react\"; export const Hello = declareSubApp({ name: \"Hello\", getModule: () => import(\"./hello\")});Copy "},{"title":"Rendering A SubApp","type":1,"pageTitle":"The Application","url":"docs/quick-start/the-application#rendering-a-subapp","content":"After you create a SubApp, you can render it on a page on the node.js server using the PageRenderer class API, and then send the result back to the browser. For example, in src/server/routes.ts, declare a fastify plugin to register a route that render the page with the Hello SubApp on it. import { Hello } from \"../app\";import { PageRenderer } from \"@xarc/react\";import { ElectrodeFastifyInstance } from \"@xarc/fastify-server\"; export async function fastifyPlugin(server: ElectrodeFastifyInstance) { const helloRenderer: PageRenderer = new PageRenderer({ pageTitle: \"Hello\", subApps: [{ name: Hello.name, ssr: true }] }); server.route({ method: \"GET\", url: \"/hello\", async handler(request, reply) { const context = await helloRenderer.render({ request }); reply.type(\"text/html\"); reply.send(context.result); } });}Copy "},{"title":"The Packages","type":0,"sectionRef":"#","url":"docs/quick-start/the-packages","content":""},{"title":"Dependencies","type":1,"pageTitle":"The Packages","url":"docs/quick-start/the-packages#dependencies","content":" Package Description @xarc/app Electrode X node.js runtime support @xarc/fastify-server A node.js server based on Fastify @xarc/react react.js support @xarc/react-query react query support @xarc/react-redux react redux support @xarc/react-router react router support  "},{"title":"Dev Dependencies","type":1,"pageTitle":"The Packages","url":"docs/quick-start/the-packages#dev-dependencies","content":" Package Description @xarc/app-dev Electrode X development only support @xarc/opt-postcss style files and css module support @xarc/opt-stylus stylus support @xarc/opt-sass sass support @xarc/opt-less less support @xarc/opt-jest jest support @xarc/opt-karma karma support @xarc/opt-mocha mocha support  "}]